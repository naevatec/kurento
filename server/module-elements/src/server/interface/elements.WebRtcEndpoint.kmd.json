{
  "remoteClasses": [
    {
      "name": "WebRtcEndpoint",
      "extends": "BaseRtpEndpoint",
      "doc": "
Endpoint that provides bidirectional WebRTC capabilities for Kurento.
<p>
  This endpoint is one side of a peer-to-peer WebRTC communication, where the
  other peer is either of a WebRTC capable browser (using the
  <em>RTCPeerConnection</em> API), a native WebRTC app, or even another Kurento
  Media Server instance.
</p>
<p>
  In order to establish WebRTC communications, peers first engage in an SDP
  Offer/Answer negotiation process, where one of the peers (the offerer) sends
  an SDP Offer, while the other peer (the answerer) responds with an SDP Answer.
  This endpoint can work in both roles.
</p>
<ul>
  <li>
    <b>As offerer</b>: The negotiation process is initiated by the media server.
    <ul>
      <li>
        Kurento generates the SDP Offer through the
        <code>generateOffer()</code> method. This offer must then be sent to the
        remote peer (the answerer) through the signaling channel.
      </li>
      <li>
        The remote peer process the SDP Offer, and generates an SDP Answer. This
        answer is then sent back to the media server.
      </li>
      <li>
        Upon receiving the SDP Answer, this endpoint must process it with the
        <code>processAnswer()</code> method.
      </li>
    </ul>
  </li>
  <li>
    <b>As answerer</b>: The negotiation process is initiated by the remote peer.
    <ul>
      <li>
        The remote peer, acting as offerer, generates an SDP Offer and sends it
        to this endpoint.
      </li>
      <li>
        This endpoint processes the SDP Offer with the
        <code>processOffer()</code> method. The result of this method will be a
        string, containing an SDP Answer.
      </li>
      <li>
        The SDP Answer must then be sent back to the offerer, so it can be
        processed by it.
      </li>
    </ul>
  </li>
</ul>
<h2>ICE candidates and connectivity checks</h2>
<p>
  SDPs are sent without ICE candidates, following the Trickle ICE optimization.
  Once the SDP negotiation is completed, both peers proceed with the ICE
  discovery process, intended to set up a bidirectional media connection. During
  this process, each peer...
</p>
<ul>
  <li>
    Discovers ICE candidates for itself, containing pairs of IPs and ports.
  </li>
  <li>
    ICE candidates are sent via the signaling channel as they are discovered, to
    the remote peer for probing.
  </li>
  <li>
    ICE connectivity checks are run as soon as the new candidate description,
    from the remote peer, is available.
  </li>
</ul>
<p>
  Once a suitable pair of candidates (one for each peer) is discovered, the
  media session can start. The harvesting process in Kurento, begins with the
  invocation of the <code>gatherCandidates()</code> method. Since the whole
  Trickle ICE purpose is to speed-up connectivity, candidates are generated
  asynchronously. Therefore, in order to capture the candidates, the user must
  subscribe to the event <code>IceCandidateFound</code>. It is important that
  the event listener is bound before invoking <code>gatherCandidates()</code>,
  otherwise a suitable candidate might be lost, and connection might not be
  established.
</p>
<p>
  It is important to keep in mind that WebRTC connection is an asynchronous
  process, when designing interactions between different MediaElements. For
  example, it would be pointless to start recording before media is flowing. In
  order to be notified of state changes, the application can subscribe to events
  generated by the WebRtcEndpoint. Following is a full list of events generated
  by WebRtcEndpoint:
</p>
<ul>
  <li>
    <code>IceComponentStateChanged</code>: This event informs only about changes
    in the ICE connection state. Possible values are:
    <ul>
      <li><code>DISCONNECTED</code>: No activity scheduled</li>
      <li><code>GATHERING</code>: Gathering local candidates</li>
      <li><code>CONNECTING</code>: Establishing connectivity</li>
      <li><code>CONNECTED</code>: At least one working candidate pair</li>
      <li>
        <code>READY</code>: ICE concluded, candidate pair selection is now final
      </li>
      <li>
        <code>FAILED</code>: Connectivity checks have been completed, but media
        connection was not established
      </li>
    </ul>
    The transitions between states are covered in RFC5245. It could be said that
    it is network-only, as it only takes into account the state of the network
    connection, ignoring other higher level stuff, like DTLS handshake, RTCP
    flow, etc. This implies that, while the component state is
    <code>CONNECTED</code>, there might be no media flowing between the peers.
    This makes this event useful only to receive low-level information about the
    connection between peers. Even more, while other events might leave a
    graceful period of time before firing, this event fires immediately after
    the state change is detected.
  </li>
  <li>
    <code>IceCandidateFound</code>: Raised when a new candidate is discovered.
    ICE candidates must be sent to the remote peer of the connection. Failing to
    do so for some or all of the candidates might render the connection
    unusable.
  </li>
  <li>
    <code>IceGatheringDone</code>: Raised when the ICE gathering process is
    completed. This means that all candidates have already been discovered.
  </li>
  <li>
    <code>NewCandidatePairSelected</code>: Raised when a new ICE candidate pair
    gets selected. The pair contains both local and remote candidates being used
    for a component. This event can be raised during a media session, if a new
    pair of candidates with higher priority in the link are found.
  </li>
  <li><code>DataChannelOpened</code>: Raised when a data channel is open.</li>
  <li><code>DataChannelClosed</code>: Raised when a data channel is closed.</li>
</ul>
<p>
  Registering to any of above events requires the application to provide a
  callback function. Each event provides different information, so it is
  recommended to consult the signature of the event listeners.
</p>
<h2>Bitrate management and network congestion control</h2>
<p>
  Congestion control is one of the most important features of WebRTC. WebRTC
  connections start with the lowest bandwidth configured and slowly ramps up to
  the maximum available bandwidth, or to the higher limit of the allowed range
  in case no bandwidth limitation is detected.
</p>
<p>
  Notice that WebRtcEndpoints in Kurento are designed in a way that
  <strong>
    multiple WebRTC connections fed by the same stream, share the same bitrate
    limits.
  </strong>
  When a new connection is added, as it requires to start with low bandwidth, it
  will cause the rest of connections to experience a transient period of
  degraded quality, until it stabilizes its bitrate. This doesn't apply when
  transcoding is involved; transcoders will adjust their output bitrate based in
  the receiver requirements, but it won't affect the original stream.
</p>
<p>
  If an incoming WebRTC stream needs to be transcoded, for whatever reason, all
  WebRtcEndpoints fed from the transcoder output will share a separate quality
  than the ones connected directly to the original stream.
</p>
<p>
  <strong>
    Note that the default <em>MaxVideoSendBandwidth</em> is a VERY conservative
    value, and leads to a low maximum video quality. Most applications will
    probably want to increase this to higher values such as 2000 kbps (2 Mbps).
  </strong>
  Check the documentation of :rom:cls:`BaseRtpEndpoint` and
  :rom:cls:`RembParams` for detailed information about bitrate management.
</p>
<h3>Keyframe requests (PLI/FIR)</h3>
<p>
  WebRTC allows receivers to emit keyframe requests for the senders, by means of
  RTCP Feedback messages called PLI (Picture Loss Indication) and/or FIR (Full
  Intra-frame Request). Kurento supports this mechanism: PLI and FIR requests
  that are emitted by a receiver will be forwarded to the sender. This way, the
  encoder of the video (e.g. a web browser) can decide if a new keyframe should
  be generated. Sometimes Kurento itself acts as encoder when transcoding is
  enabled, so in this case it is Kurento itself the one generating keyframes.
</p>
<p>
  On top of this, a common technique used for streaming is to forcefully request
  new keyframes. Either in fixed intervals, or explicitly by the application.
  Kurento doesn't support the former, but the latter is possible by calling
  <code>requestKeyframe()</code> from a subscribing element (i.e. an endpoint
  that sends data out from the Kurento Pipeline).
</p>
<h2>WebRTC Data Channels</h2>
<p>
  DataChannels allow other media elements that make use of the DataPad, to send
  arbitrary data. For instance, if there is a filter that publishes event
  information, it will be sent to the remote peer through the channel. There is
  no API available for programmers to make use of this feature in the
  WebRtcElement. DataChannels can be configured to provide the following:
</p>
<ul>
  <li>Reliable or partially reliable delivery of sent messages</li>
  <li>In-order or out-of-order delivery of sent messages</li>
</ul>
<p>
  Unreliable, out-of-order delivery is equivalent to raw UDP semantics. The
  message may make it, or it may not, and order is not important. However, the
  channel can be configured to be <i>partially reliable</i> by specifying the
  maximum number of retransmissions or setting a time limit for retransmissions:
  the WebRTC stack will handle the acknowledgments and timeouts.
</p>
<p>
  The possibility to create DataChannels in a WebRtcEndpoint must be explicitly
  enabled when creating the endpoint, as this feature is disabled by default. If
  this is the case, they can be created invoking the createDataChannel method.
  The arguments for this method, all of them optional, provide the necessary
  configuration:
</p>
<ul>
  <li>
    <code>label</code>: assigns a label to the DataChannel. This can help
    identify each possible channel separately.
  </li>
  <li>
    <code>ordered</code>: specifies if the DataChannel guarantees order, which
    is the default mode. If maxPacketLifetime and maxRetransmits have not been
    set, this enables reliable mode.
  </li>
  <li>
    <code>maxPacketLifeTime</code>: The time window in milliseconds, during
    which transmissions and retransmissions may take place in unreliable mode.
    This forces unreliable mode, even if <code>ordered</code> has been
    activated.
  </li>
  <li>
    <code>maxRetransmits</code>: maximum number of retransmissions that are
    attempted in unreliable mode. This forces unreliable mode, even if
    <code>ordered</code> has been activated.
  </li>
  <li>
    <code>Protocol</code>: Name of the subprotocol used for data communication.
  </li>
</ul>
      ",
      "properties": [
        {
          "name": "networkInterfaces",
          "doc": "Local network interfaces used for ICE gathering.
<p>
  If you know which network interfaces should be used to perform ICE (for WebRTC
  connectivity), you can define them here. Doing so has several advantages:
</p>
<ul>
  <li>
    The WebRTC ICE gathering process will be much quicker. Normally, it needs to
    gather local candidates for all of the network interfaces, but this step can
    be made faster if you limit it to only the interface that you know will
    work.
  </li>
  <li>
    It will ensure that the media server always decides to use the correct
    network interface. With WebRTC ICE gathering it's possible that, under some
    circumstances (in systems with virtual network interfaces such as
    <code>docker0</code>) the ICE process ends up choosing the wrong local IP.
  </li>
</ul>
<p>
  <code>networkInterfaces</code> is a comma-separated list of network interface
  names.
</p>
<p>Examples:</p>
<ul>
  <li><code>networkInterfaces=eth0</code></li>
  <li><code>networkInterfaces=eth0,enp0s25</code></li>
</ul>
          ",
          "type": "String"
        },
        {
          "name": "iceTcp",
          "doc": "Enable ICE-TCP candidate gathering.
<p>
  This setting enables or disables using TCP for ICE candidate gathering in the
  underlying libnice library:
  https://libnice.freedesktop.org/libnice/NiceAgent.html#NiceAgent--ice-tcp
</p>
<p>
  You might want to disable ICE-TCP to potentially speed up ICE gathering by
  avoiding TCP candidates in scenarios where they are not needed.
</p>
<p><code>iceTcp</code> is either 1 (ON) or 0 (OFF). Default: 1 (ON).</p>
          ",
          "type": "boolean"
        },
        {
          "name": "stunServerAddress",
          "doc": "STUN server IP address.
<p>The ICE process uses STUN to punch holes through NAT firewalls.</p>
<p>
  <code>stunServerAddress</code> MUST be an IP address; domain names are NOT
  supported.
</p>
<p>
  You need to use a well-working STUN server. Use this to check if it works:<br />
  https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/<br />
  From that check, you should get at least one Server-Reflexive Candidate (type
  <code>srflx</code>).
</p>
          ",
          "type": "String"
        },
        {
          "name": "stunServerPort",
          "doc": "Port of the STUN server",
          "type": "int"
        },
        {
          "name": "turnUrl",
          "doc": "TURN server URL.
<p>
  When STUN is not enough to open connections through some NAT firewalls, using
  TURN is the remaining alternative.
</p>
<p>
  Note that TURN is a superset of STUN, so you don't need to configure STUN if
  you are using TURN.
</p>
<p>The provided URL should follow one of these formats:</p>
<ul>
  <li><code>user:password@ipaddress:port</code></li>
  <li>
    <code>user:password@ipaddress:port?transport=[udp|tcp|tls]</code>
  </li>
</ul>
<p>
  <code>ipaddress</code> MUST be an IP address; domain names are NOT supported.<br />
  <code>transport</code> is OPTIONAL. Possible values: udp, tcp, tls. Default: udp.
</p>
<p>
  You need to use a well-working TURN server. Use this to check if it works:<br />
  https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/<br />
  From that check, you should get at least one Server-Reflexive Candidate (type
  <code>srflx</code>) AND one Relay Candidate (type <code>relay</code>).
</p>
          ",
          "type": "String"
        },
        {
          "name": "externalIPv4",
          "doc": "External IPv4 address of the media server.
<p>
  Forces all local IPv4 ICE candidates to have the given address. This is really
  nothing more than a hack, but it's very effective to force a public IP address
  when one is known in advance for the media server. In doing so, KMS will not
  need a STUN or TURN server, but remote peers will still be able to contact it.
</p>
<p>
  You can try using this setting if KMS is deployed on a publicly accessible
  server, without NAT, and with a static public IP address. But if it doesn't
  work for you, just go back to configuring a STUN or TURN server for ICE.
</p>
<p>
  Only set this parameter if you know what you're doing, and you understand 100%
  WHY you need it. For the majority of cases, you should just prefer to
  configure a STUN or TURN server.
</p>
<p><code>externalIPv4</code> is a single IPv4 address.</p>
<p>Example:</p>
<ul>
  <li><code>externalIPv4=198.51.100.1</code></li>
</ul>
          ",
          "type": "String"
        },
        {
          "name": "externalIPv6",
          "doc": "External IPv6 address of the media server.
<p>
  Forces all local IPv6 ICE candidates to have the given address. This is really
  nothing more than a hack, but it's very effective to force a public IP address
  when one is known in advance for the media server. In doing so, KMS will not
  need a STUN or TURN server, but remote peers will still be able to contact it.
</p>
<p>
  You can try using this setting if KMS is deployed on a publicly accessible
  server, without NAT, and with a static public IP address. But if it doesn't
  work for you, just go back to configuring a STUN or TURN server for ICE.
</p>
<p>
  Only set this parameter if you know what you're doing, and you understand 100%
  WHY you need it. For the majority of cases, you should just prefer to
  configure a STUN or TURN server.
</p>
<p><code>externalIPv6</code> is a single IPv6 address.</p>
<p>Example:</p>
<ul>
  <li><code>externalIPv6=2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></li>
</ul>
          ",
          "type": "String"
        },
        {
          "name": "ICECandidatePairs",
          "doc": "the ICE candidate pair (local and remote candidates) used by the ICE library for each stream.",
          "type": "IceCandidatePair[]",
          "readOnly": true
        },
        {
          "name": "IceConnectionState",
          "doc": "the ICE connection state for all the connections.",
          "type": "IceConnection[]",
          "readOnly": true
        },
        {
          "name": "DtlsConnectionState",
          "doc": "the DTLS connection state for all the connections.",
          "type": "DtlsConnection[]",
          "readOnly": true
        }
      ],
      "constructor":
        {
          "doc": "Builder for the :rom:cls:`WebRtcEndpoint`",
          "params": [
            {
              "name": "mediaPipeline",
              "doc": "the :rom:cls:`MediaPipeline` to which the endpoint belongs",
              "type": "MediaPipeline"
            },
            {
              "name": "recvonly",
              "doc": "Single direction, receive-only endpoint",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            },
            {
              "name": "sendonly",
              "doc": "Single direction, send-only endpoint",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            },
            {
              "name": "useDataChannels",
              "doc": "Activate data channels support",
              "type": "boolean",
              "optional": true,
              "defaultValue": false
            },
            {
              "name": "certificateKeyType",
              "doc": "Define the type of the certificate used in dtls",
              "type": "CertificateKeyType",
              "optional": true,
              "defaultValue": "RSA"
            },
            {
              "name": "qosDscp",
              "doc": "DSCP value to be used in network traffic sent from this endpoint
              <p>
              If this parameter is present with a value different to NO_VALUE, all traffic sent from this WebRTCEndpoint will be marked with the correspondent
              DSCP value according to the DiffServ architecture. This may provide better handling of network traffic according to its characteristics associated to
              its DSCP value. This better handling includes priority in forwarding traffic and probability of packet drop in case of network congestion.
              <p>
              It must be taken into account that on Internet not all intermediate routers are guaranteed to enforce those DSCP values, even it is possible that
              certain routers just block traffic marked with specific DSCP values, as discussed here https://datatracker.ietf.org/doc/html/rfc8835#section-4.2.
              <p>
              So, this feature must be managed with care and is mostly intended for private networks, where the network proprietor can configure and guarantee
              DSCP management in all routers.",
              "type": "DSCPValue",
              "optional": true,
              "defaultValue": "NO_VALUE"
            }
          ]
        },
      "methods": [
        {
          "name": "gatherCandidates",
          "doc": "Start the ICE candidate gathering.
<p>
  This method triggers the asynchronous discovery of ICE candidates (as per the
  Trickle ICE mechanism), and returns immediately. Every newly trickled
  candidate is reported to the application by means of an
  <code>IceCandidateFound</code> event. Finally, when all candidates have been
  gathered, the <code>IceGatheringDone</code> event is emitted.
</p>
<p>
  Normally, you would call this method as soon as possible after calling
  <code>SdpEndpoint::generateOffer</code> or
  <code>SdpEndpoint::processOffer</code>, to quickly start discovering
  candidates and sending them to the remote peer.
</p>
<p>
  You can also call this method <em>before</em> calling
  <code>generateOffer</code> or <code>processOffer</code>. Doing so will include
  any already gathered candidates into the resulting SDP. You can leverage this
  behavior to implement fully traditional ICE (without Trickle): first call
  <code>gatherCandidates</code>, then only handle the SDP messages after the
  <code>IceGatheringDone</code> event has been received. This way, you're making
  sure that all candidates have indeed been gathered, so the resulting SDP will
  include all of them.
</p>
          ",
          "params": []
        },
        {
          "name": "addIceCandidate",
          "doc": "Process an ICE candidate sent by the remote peer of the connection.",
          "params": [
            {
              "name": "candidate",
              "doc": "Remote ICE candidate",
              "type": "IceCandidate"
            }
          ]
        },
        {
          "name": "createDataChannel",
          "doc": "Create a new data channel, if data channels are supported.
<p>
  Being supported means that the WebRtcEndpoint has been created with data
  channel support, the client also supports data channels, and they have been
  negotiated in the SDP exchange. Otherwise, the method throws an exception,
  indicating that the operation is not possible.
</p>
<p>
  Data channels can work in either unreliable mode (analogous to User Datagram
  Protocol or UDP) or reliable mode (analogous to Transmission Control Protocol
  or TCP). The two modes have a simple distinction:
</p>
<ul>
  <li>
    Reliable mode guarantees the transmission of messages and also the order in
    which they are delivered. This takes extra overhead, thus potentially making
    this mode slower.
  </li>
  <li>
    Unreliable mode does not guarantee every message will get to the other side
    nor what order they get there. This removes the overhead, allowing this mode
    to work much faster.
  </li>
</ul>
<p>If data channels are not supported, this method throws an exception.</p>
          ",
          "params": [
            {
              "name": "label",
              "doc": "Channel's label",
              "type": "String",
              "defaultValue": "",
              "optional": true
            },
            {
              "name": "ordered",
              "doc": "If the data channel should guarantee order or not. If true, and maxPacketLifeTime and maxRetransmits have not been provided, reliable mode is activated.",
              "type": "boolean",
              "defaultValue": true,
              "optional": true
            },
            {
              "name": "maxPacketLifeTime",
              "doc": "The time window (in milliseconds) during which transmissions and retransmissions may take place in unreliable mode.
Note that this forces unreliable mode, even if <code>ordered</code> has been activated.
              ",
              "type": "int",
              "defaultValue": -1,
              "optional": true
            },
            {
              "name": "maxRetransmits",
              "doc": "maximum number of retransmissions that are attempted in unreliable mode.
Note that this forces unreliable mode, even if <code>ordered</code> has been activated.
              ",
              "type": "int",
              "defaultValue": -1,
              "optional": true
            },
            {
              "name": "protocol",
              "doc": "Name of the subprotocol used for data communication",
              "type": "String",
              "defaultValue": "",
              "optional": true
            }
          ]
        },
        {
          "name": "closeDataChannel",
          "doc": "Closes an open data channel",
          "params": [
            {
              "name": "channelId",
              "doc": "The channel identifier",
              "type": "int"
            }
          ]
        }
      ],
      "events": [
        "IceCandidateFound",
        "IceGatheringDone",
        "IceComponentStateChanged",
        "DtlsConnectionStateChange",
        "DataChannelOpened",
        "DataChannelClosed",
        "NewCandidatePairSelected"
      ]
    }
  ],
  "events": [
    {
      "name": "IceCandidateFound",
      "extends": "Media",
      "doc": "Notifies a new local candidate.
These candidates should be sent to the remote peer, to complete the ICE negotiation process.
      ",
      "properties": [
        {
          "name": "candidate",
          "doc": "New local candidate",
          "type": "IceCandidate"
        }
      ]
    },
    {
      "name": "IceGatheringDone",
      "extends": "Media",
      "doc": "Event fired when al ICE candidates have been gathered.",
      "properties": []
    },
    {
      "name": "IceComponentStateChanged",
      "extends": "Media",
      "doc": "Event fired when and ICE component state changes.
See :rom:cls:`IceComponentState` for a list of possible states.
      ",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "int"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ]
    },
    {
      "name": "DtlsConnectionStateChange",
      "extends": "Media",
      "doc": "Event fired when and ICE component DTLS connection state changes.
See :rom:cls:`DtlsComponentState` for a list of possible states.
      ",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "String"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "String"
        },
        {
          "name": "connectionId",
          "doc": "ID of the underlying DTLS connection",
          "type": "String"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "DtlsConnectionState"
        }
      ]
    },
    {
      "name": "DataChannelOpened",
      "doc": "Event fired when a new data channel is created.",
      "extends": "Media",
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ]
    },
    {
      "name": "DataChannelClosed",
      "doc": "Event fired when a data channel is closed.",
      "extends": "Media",
      "properties": [
        {
          "name": "channelId",
          "doc": "The channel identifier",
          "type": "int"
        }
      ]
    },
    {
      "name": "NewCandidatePairSelected",
      "doc": "Event fired when a new pair of ICE candidates is used by the ICE library.
This could also happen in the middle of a session, though not likely.
      ",
      "extends": "Media",
      "properties": [
        {
          "name": "candidatePair",
          "doc": "The new pair of candidates",
          "type": "IceCandidatePair"
        }
      ]
    }
  ],
  "complexTypes": [
    {
      "typeFormat": "REGISTER",
      "name": "IceCandidate",
      "doc": "IceCandidate representation based on <code>RTCIceCandidate</code> interface.
@see https://www.w3.org/TR/2018/CR-webrtc-20180927/#rtcicecandidate-interface",
      "properties": [
        {
          "name": "candidate",
          "doc": "The candidate-attribute as defined in section 15.1 of ICE (rfc5245).",
          "type": "String"
        },
        {
          "name": "sdpMid",
          "doc": "If present, this contains the identifier of the 'media stream identification'.",
          "type": "String"
        },
        {
          "name": "sdpMLineIndex",
          "doc": "The index (starting at zero) of the m-line in the SDP this candidate is associated with.",
          "type": "int"
        }
      ]
    },
    {
      "name": "IceComponentState",
      "typeFormat": "ENUM",
      "doc": "States of an ICE component.",
      "values": [
        "DISCONNECTED",
        "GATHERING",
        "CONNECTING",
        "CONNECTED",
        "READY",
        "FAILED"
      ]
    },
    {
      "name": "DtlsConnectionState",
      "typeFormat": "ENUM",
      "doc": "States of a DTLS connection.",
      "values": [
        "NEW",
        "CLOSED",
        "FAILED",
        "CONNECTING",
        "CONNECTED"
      ]
    },
    {
      "typeFormat": "REGISTER",
      "name": "IceCandidatePair",
      "doc": "The ICE candidate pair used by the ICE library, for a certain stream.",
      "properties": [
        {
          "name": "streamId",
          "doc": "Stream ID of the ICE connection",
          "type": "String"
        },
        {
          "name": "componentId",
          "doc": "Component ID of the ICE connection",
          "type": "int"
        },
        {
          "name": "localCandidate",
          "doc": "The local candidate used by the ICE library.",
          "type": "String"
        },
        {
          "name": "remoteCandidate",
          "doc": "The remote candidate used by the ICE library.",
          "type": "String"
        }
      ]
    },
    {
      "name": "IceConnection",
      "typeFormat": "REGISTER",
      "doc": "The ICE connection state for a certain stream and component.",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "String"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "int"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "IceComponentState"
        }
      ]
    },
    {
      "name": "DtlsConnection",
      "typeFormat": "REGISTER",
      "doc": "The DTLS connection state for a certain stream and component.",
      "properties": [
        {
          "name": "streamId",
          "doc": "The ID of the stream",
          "type": "String"
        },
        {
          "name": "componentId",
          "doc": "The ID of the component",
          "type": "String"
        },
        {
          "name": "connectionId",
          "doc": "The ID of the underlying DTLS connection",
          "type": "String"
        },
        {
          "name": "state",
          "doc": "The state of the component",
          "type": "DtlsConnectionState"
        }
      ]
    },
    {
      "name": "CertificateKeyType",
      "typeFormat": "ENUM",
      "doc": ".",
      "values": [
        "RSA",
        "ECDSA"
      ]
    },
    {
      "typeFormat": "ENUM",
      "values": [
        "NO_DSCP",                  //  -1 USed to signal that no DSCP feature is requested
        "NO_VALUE",                 //  -1 Used to signal to use the default value configured in configuration file
        "AUDIO_VERYLOW",            //   LE (1)
        "AUDIO_LOW",                //   DF (0)
        "AUDIO_MEDIUM",             //  EF (46)
        "AUDIO_HIGH",               //  EF (46)
        "VIDEO_VERYLOW",            //  LE (1)
        "VIDEO_LOW",                //  DF (0)
        "VIDEO_MEDIUM",             //  AF42 (36)
        "VIDEO_MEDIUM_THROUGHPUT",  //  AF43 (38)
        "VIDEO_HIGH",               //  AF42 (36)
        "VIDEO_HIGH_THROUGHPUT",    //  AF41(34)
        "DATA_VERYLOW",             //  LE (1)
        "DATA_LOW",                 //  DF (0)
        "DATA_MEDIUM",              //  AF11 (10)
        "DATA_HIGH",                //  AF21 (18)
        "CHROME_HIGH",              // CS7 (56)
        "CHROME_MEDIUM",            // CS7 (56)
        "CHROME_LOW",               // CS0 (0)
        "CHROME_VERYLOW",           // CS1 (8)
        "CS0",      //   0
        "CS1",      //   8
        "CS2",      //  16
        "CS3",      //  24
        "CS4",      //  32
        "CS5",      //  40
        "CS6",      //  48
        "CS7",      //  56
        "AF11",     //  10
        "AF12",     //  12
        "AF13",     //  14
        "AF21",     //  18
        "AF22",     //  20
        "AF23",     //  22
        "AF31",     //  26
        "AF32",     //  28
        "AF33",     //  30
        "AF41",     //  34
        "AF42",     //  36
        "AF43",     //  38
        "EF",       //  46
        "VOICEADMIT", // 44
        "LE"        //   1
      ],
      "name": "DSCPValue",
      "doc": "Possible DSCP values
      <p>
      WebRTC recommended values are taken from RFC 8837 https://datatracker.ietf.org/doc/html/rfc8837#section-5 , These are the values from AUDIO_VERYLOW to DATA_HIGH. First element in the
      name indicates kind of traffic that it should apply to, the second indicates relative priority. For video, a third field would indicate if the traffic is intended for high throughput or not.
      As indicated on RFC 8837 section 5 diagram:

          +=======================+==========+=====+============+============+
          |       Flow Type       | Very Low | Low |   Medium   |    High    |
          +=======================+==========+=====+============+============+
          |         Audio         |  LE (1)  |  DF |  EF (46)   |  EF (46)   |
          |                       |          | (0) |            |            |
          +-----------------------+----------+-----+------------+------------+
          +-----------------------+----------+-----+------------+------------+
          |   Interactive Video   |  LE (1)  |  DF | AF42, AF43 | AF41, AF42 |
          | with or without Audio |          | (0) |  (36, 38)  |  (34, 36)  |
          +-----------------------+----------+-----+------------+------------+
          +-----------------------+----------+-----+------------+------------+
          | Non-Interactive Video |  LE (1)  |  DF | AF32, AF33 | AF31, AF32 |
          | with or without Audio |          | (0) |  (28, 30)  |  (26, 28)  |
          +-----------------------+----------+-----+------------+------------+
          +-----------------------+----------+-----+------------+------------+
          |          Data         |  LE (1)  |  DF |    AF11    |    AF21    |
          |                       |          | (0) |            |            |
          +-----------------------+----------+-----+------------+------------+

      As indicated also in RFC, non interactive video is not considered
      <p>
      Apart from the WebRTC recommended values, we also include all possible values are referenced in http://www.iana.org/assignments/dscp-registry/dscp-registry.xml of course some of
      those values are synonyms for the WebRTC recommended ones, they are included mainly for completeness
      <p>
      And as a last point, we include a shorthand for Chrome supported markings for low  (CS0), very low (CS1), medium (CS7) and high (CS7) priorities in priority property for RTCRtpSender parameters. See https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters
      <p>
      This only covers outgoing network packets from KMS, to complete the solution, DSCP must be also requested on client, unfortunately for traffic on the other direction, this must be requested to the
      browser or client. On browser, the client application needs to use the following API https://www.w3.org/TR/webrtc-priority/"
    }
  ]
}
